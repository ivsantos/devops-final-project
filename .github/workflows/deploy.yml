name: üöÄ Deploy

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

env:
  AWS_CLUSTER_NAME: webapp-cluster
  AWS_REGION: eu-west-1
  K8S_NAMESPACE: frontend

jobs:
  build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v3

      - name: ü§ñ Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.27.3'
        id: install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üîê Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: üê≥ Build, tag, and push Docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: webapp
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -t $REGISTRY/$REPOSITORY:latest .
          docker push -a $REGISTRY/$REPOSITORY

      - name: üìù Update kube config
        run: aws eks update-kubeconfig --name $AWS_CLUSTER_NAME --region $AWS_REGION

      - name: üë®üèº‚Äçüè≠ Update Kubernetes cluster
        run: |
          kubectl apply -f k8s/00-aws-auth.yml
          kubectl apply -f k8s/01-namespace.yml
          kubectl apply -n $K8S_NAMESPACE -f k8s/02-deployment.yml
          kubectl apply -n $K8S_NAMESPACE -f k8s/03-loadbalancer.yml
          : # Restart deployment to force image pull. This will not introduce downtime as it kills one pod at a time.
          kubectl -n $K8S_NAMESPACE rollout restart deploy webapp
